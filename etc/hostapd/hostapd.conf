#### FILE: /etc/hostapd/hostapd.conf ####

### HARDWARE SETTINGS ###

# Internal name of hardware Wi-Fi hardware interface
interface=wlan0

# Name of kernel driver; for the kernel version in use: nl80211
driver=nl80211

# wireless mode (a/b/g/n etc.). g is a reasonable compromise between performance and  compatibility. g is limited to 2.4 GHz band; most consumer IoT devices, including all those used in this study, support only 2.4 GHz. 
hw_mode=g

# Specific radio channel in the 2.4 GHz range to use for the wireless radio. Any value 1-12 may be used, but performance is degraded due to radio interference if other nearby networks are using overlapping channels.
channel=6


### SSID AND SERVICES CONFIGURATION ###

# Choose a suitable SSID (network name) for the AP
ssid=<SSID>

# If set to 1, the AP is "hidden" from clients that do not already know its name (SSID name not declared in beacon frames, does not respond to probe requests). Most IoT devices will likely need a visible AP for initial configuration so this should be set to 0.
ignore_broadcast_ssid=0

# WMM (Wi-Fi Multimedia) enables Quality of Service (QoS) features to prioritize/optimize traffic by its type or QoS demands (e.g. streaming audio requiring low-latency). I kept this disabled to minimize uncontrolled variables, as it is not critical for any of the devices tested.
wmm_enabled=0

# MAC address filtering disabled. (This is legacy access control option that accepted connections from clients only if their hardware MAC address was on the allow-list. It does not provide any meaningful security assurances.)
macaddr_acl=0


### WIRELESS SECURITY / ENCRYPTION CONFIG ###

# Bitmask for WPA mode (set bit 0 to support WPA (WPA1), bit 1 to support WPA2). Most IoT devices will support WPA2, so only use (deprecated) WPA1 if necessary
wpa=2

# Passphrase to authorize clients on network and derive encryption keys. WARNING: Configuring IoT devices via mobile app may result in this passphrase being transmitted on an unencrypted ad-hoc wireless network, over Bluetooth, or through cloud servers; furthermore, some devices (e.g. Tuya -- see [Steigerwald, 2018]) have been known to store the passphrase as plaintext in onboard flash memory. I recommend choosing a passphrase that is not used for any other network/purpose.
wpa_passphrase=<PASSPHRASE>

# Key management mode: should generally be WPA-PSK (pre-shared key). Note that when using WPA2, the setting here is still "WPA-PSK".
wpa_key_mgmt=WPA-PSK
_
# Comma-separated list of allowed pairwise ciphers for WPA2 confidentiality encryption. CCMP (AES Counter w/ CBC-MAC) is the standard. "TKIP" also supported on some systems but is deprecated. Most modern IoT hardware should work with CCMP only.
rsn_pairwise=CCMP

# A bitmask that determines allowed authentication modes (algorithms): open auth (bit 0 set) and/or shared key (bit 1 set). Shared key auth was only used for the now-deprecated WEP. WPA(2) uses open or "null" auth as a kind of vestigial placeholder for protocol consistency / hardware compatibility (see [van Oorschot, 2022, chapter 12])
auth_algs=1
